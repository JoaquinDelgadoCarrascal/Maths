#!/usr/bin/env python3

from sys import argv
from math import *

def decrypt_msg():
    key, size = key_matrix(0, argv[2])
    trasposed = getTrasposed(key, size)
    #print_key(key, size)
    print_key(trasposed, size)
    print("\nDecrypted message:")

def encrypt_msg():
    key, size = key_matrix(1, argv[2])
    print_key(key, size)
    matrix = transform_to_matrix(size, argv[1])
    print("\nEncrypted message:")
    encrypt(size, matrix, key)

def encrypt(size, message, key):
    for i in range(len(message)):
        for j in range(size):
            for k in range(size):
                num = 0
                for l in  range(size):
                    num += key[l][k % size] * message[i][j][l]
                if (i == 0 and j == 0 and k == 0):
                    k = k
                elif (num != 0):
                    print(" ", end ="")
                if (num != 0):
                    print(num, end = '')
    print()

def transform_to_matrix(size, message):
    matrix = [[[0 for k in range(size)]for j in range(size)]for i in range(int(len(message) / (size * size) + 1))]
    for i in range(int(len(message) / (size * size) + 1)):
        for j in range(size):
            for k in range(size):
                if i * (size * size) + j * size + k > len(message) - 1:
                    matrix[i][j][k] = 0
                else:
                    matrix[i][j][k] = int(ord(message[i * (size * size) + j * size + k]))
    return(matrix)

def print_key(key, size):
    print("Key matrix:")
    for p in range(len(key)):
        for i in range(len(key[p])):
            print(key[p][i], end = '')
            if ((p * size + i + 1) % size == 0):
                print()
            else:
                print("\t", end= "")

def getMatrixMinor(m,i,j):
    return [row[:j] + row[j+1:] for row in (m[:i]+m[i+1:])]

def getMatrixDeternminant(m):
    determinant = 0
    if len(m) == 2:
        return m[0][0]*m[1][1]-m[0][1]*m[1][0]
    for c in range(len(m)):
        determinant += ((-1)**c)*m[0][c]*getMatrixDeternminant(getMatrixMinor(m,0,c))
    return determinant

def getTrasposed(mat, size):
    trasposed = []
    for j in range(size):
        trasposed.append([])
        for i in range(size):
            trasposed[j].append(mat[i][j])
    return trasposed

def key_matrix(encrypt, key):
    size = ceil(sqrt(len(key)))
    mat = []
    for p in range(size):
        mat.append([])
        for i in range(size):
            if (p * size + i > len(key) - 1):
                mat[p].append(0)
            else:
                mat[p].append(int(ord(key[p * size + i])))
    return (mat, size)

def help():
    print("USAGE\n")
    print("\t./103cipher message key flag\n\n")
    print("DESCRIPTION\n")
    print("\tmessage\t\ta message, made of ASCII characters\n")
    print("\tkey\t\tthe encryption key, made of ASCII characters\n")
    print("\tflag\t\t0 for the message to be encrypted, 1 to be decrypted\n")

def main():
    try:
        if len(argv) == 2 and argv[1] == '-h':
            help()
        elif len(argv) == 4:
            if (argv[3] == '1'):
                decrypt_msg()
            elif (argv[3] == "0"):
                encrypt_msg()
            else:
                raise Exception
        else:
            raise Exception
    except Exception:
        print ("Error")
        exit (84)
    exit (0)

main()