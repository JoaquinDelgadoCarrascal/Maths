#!/usr/bin/env python3

from sys import argv
from math import sqrt, pi, tan

def sphere():
    xp = int(argv[2])
    yp = int(argv[3])
    zp = int(argv[4])
    xv = int(argv[5])
    yv = int(argv[6])
    zv = int(argv[7])
    radius = int(argv[8])

    if radius < 0:
        print ("Error")
        exit (84)
    print("Sphere of radius", radius)
    print("Line passing through the point (", xp, ", ", yp, ", ", zp, ") and parallel to the vector (", xv, ", ", yv, ", ", zv, ')', sep = '')
    t1, t2 = sphere_ecuation(xp, yp, zp, xv, yv, zv, radius)
    if t2 == 'null' and t1 != 'null':
        x1 = xp + t1 * xv
        y1 = yp + t1 * yv
        z1 = zp + t1 * zv
        print("1 intersection point:")
        print('(', '%.3f' %x1, ', ', '%.3f' %y1, ', ', '%.3f' %z1, ')', sep = '')
    elif t2 != 'null' and t1 != 'null':
        x1 = xp + t1 * xv
        y1 = yp + t1 * yv
        z1 = zp + t1 * zv
        x2 = xp + t2 * xv
        y2 = yp + t2 * yv
        z2 = zp + t2 * zv
        print("2 intersection points:")
        print('(', '%.3f' %x1, ', ', '%.3f' %y1, ', ', '%.3f' %z1, ')', sep = '')
        print('(', '%.3f' %x2, ', ', '%.3f' %y2, ', ', '%.3f' %z2, ')', sep = '')

def cylinder():
    xp = int(argv[2])
    yp = int(argv[3])
    zp = int(argv[4])
    xv = int(argv[5])
    yv = int(argv[6])
    zv = int(argv[7])
    radius = int(argv[8])

    if radius < 0:
        print ("Error")
        exit (84)
    print("Cylinder of radius", radius)
    print("Line passing through the point (", xp, ", ", yp, ", ", zp, ") and parallel to the vector (", xv, ", ", yv, ", ", zv, ')', sep = '')
    t1, t2 = cylinder_ecuation(xp, yp, zp, xv, yv, zv, radius)
    if t2 == 'null' and t1 != 'null':
        x1 = xp + t1 * xv
        y1 = yp + t1 * yv
        z1 = zp + t1 * zv
        print("1 intersection point:")
        print('(', '%.3f' %x1, ', ', '%.3f' %y1, ', ', '%.3f' %z1, ')', sep = '')
    elif t2 != 'null' and t1 != 'null':
        x1 = xp + t1 * xv
        y1 = yp + t1 * yv
        z1 = zp + t1 * zv
        x2 = xp + t2 * xv
        y2 = yp + t2 * yv
        z2 = zp + t2 * zv
        print("2 intersection points:")
        print('(', '%.3f' %x1, ', ', '%.3f' %y1, ', ', '%.3f' %z1, ')', sep = '')
        print('(', '%.3f' %x2, ', ', '%.3f' %y2, ', ', '%.3f' %z2, ')', sep = '')
    elif t1 == 'null' and t2 == '84':
        print ("There is an infinite number of intersection points.")

def cone():
    xp = int(argv[2])
    yp = int(argv[3])
    zp = int(argv[4])
    xv = int(argv[5])
    yv = int(argv[6])
    zv = int(argv[7])
    angle = int(argv[8])

    if angle < 0 or angle > 360: 
        print("Error")
        exit (84)
    print("Cone with a " + str(angle) + " degree angle")
    print("Line passing through the point (", xp, ", ", yp, ", ", zp, ") and parallel to the vector (", xv, ", ", yv, ", ", zv, ')', sep = '')
    t1, t2 = cone_ecuation(xp, yp, zp, xv, yv, zv, angle)
    if t2 != 'null' and t1 != 'null':
        x1 = xp + t1 * xv
        y1 = yp + t1 * yv
        z1 = zp + t1 * zv
        x2 = xp + t2 * xv
        y2 = yp + t2 * yv
        z2 = zp + t2 * zv
        print("2 intersection points:")
        print('(', '%.3f' %x2, ', ', '%.3f' %y2, ', ', '%.3f' %z2, ')', sep = '')
        print('(', '%.3f' %x1, ', ', '%.3f' %y1, ', ', '%.3f' %z1, ')', sep = '')
    elif t2 == 'null' and t1 != 'null':
        x1 = xp + t1 * xv
        y1 = yp + t1 * yv
        z1 = zp + t1 * zv
        print("1 intersection point:")
        print('(', '%.3f' %x1, ', ', '%.3f' %y1, ', ', '%.3f' %z1, ')', sep = '')

def sphere_ecuation(xp, yp, zp, xv, yv, zv, radius):
    a = int((xv*xv)+(yv*yv)+(zv*zv))
    b = int(2 * ((xp*xv)+(yp*yv)+(zp*zv)))
    c = int((xp*xp)+(yp*yp)+(zp*zp) - (radius * radius))
    divider = (2 * a)
    discriminant = (b * b) - 4 * a * c

    if divider != 0 and discriminant > 0:
        t1 = float(((-b + sqrt(discriminant))/divider))
        t2 = float(((-b - sqrt(discriminant))/divider))
        return t1, t2
    elif discriminant == 0:
        t1 = float(((-b + sqrt(discriminant))/divider))
        return t1, 'null'
    else:
        print("No intersection point.")
        return 'null', 'null'

def cylinder_ecuation(xp, yp, zp, xv, yv, zv, radius):
    a = int((xv*xv)+(yv*yv))
    b = int(2 * ((xp*xv)+(yp*yv)))
    c = int((xp*xp)+(yp*yp) - (radius * radius))
    discriminant = (b * b) - 4 * a * c
    divider = (2 * a)

    if a == 0:
        return 'null', '84'
    elif divider != 0 and discriminant > 0:
        t1 = float(((-b + sqrt(discriminant))/divider))
        t2 = float(((-b - sqrt(discriminant))/divider))
        return t1, t2
    elif discriminant == 0:
        t1 = float(((-b + sqrt(discriminant))/divider))
        return t1, 'null'
    else:
        print("No intersection point.")
        return 'null', 'null'

def cone_ecuation(xp, yp, zp, xv, yv, zv, angle):
    a = (xv * xv + yv * yv - (zv * tan(angle))**2)
    b = (2 * (xp * xv + yp * yv - (zp * zv * (tan(angle)**2))))
    c = (xp * xp + yp * yp - zp * zp * (tan(angle)**2))
    angle = (angle * pi / 180)

    if (b**2 - (4 * a * c)) > 0:
        t1 = float((-b - sqrt(b**2 - (4 * a * c))) / (2 * a))
        t2 = float((-b + sqrt(b**2 - (4 * a * c))) / (2 * a))
        return t1, t2
    if (b**2 - (4 * a * c)) < 0:
        print("No intersection point.")
        return 'null', 'null'
    if (b**2 - (4 * a * c)) == 0:
        t1 = float(-b / (2 * a))
        return t1, 'null'

def help():
    print("USAGE")
    print("\t./104intersection opt xp yp zp xv yv zv p\n")
    print("DESCRIPION")
    print("\topt\t\tsurface option: 1 for a sphere, 2 for a cylinder, 3 for a cone")
    print("\t(xp, yp, zp)\tcoordinates of a point by which the light ray passes through")
    print("\t(xv, yv, zv)\tcoordinates of a vector parallel to the light ray")
    print("\tp\t\tparameter: radius of the sphere, radius of the cylinder, or angle formed by the cone and the Z-axis")

def main():
    try:
        if len(argv) == 9 and argv[1] < '4' and argv[1] > '0':
            if argv[1] == '1':
                sphere()
            if argv[1] == '2':
                cylinder()
            if argv[1] == '3':
                cone()
        elif len(argv) == 2:
            if argv[1] == '-h':
                help()
        else:
            raise Exception
    except Exception:
        print ("Error")
        exit (84)
if __name__ == "__main__":
    main()